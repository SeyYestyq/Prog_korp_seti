using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;

namespace Restaurant.Api.Controllers
{
    [ApiController]
    [Route("api/ai")]
    public class AiController : ControllerBase
    {
        private readonly ILogger<AiController> _logger;

        public AiController(ILogger<AiController> logger)
        {
            _logger = logger;
        }

        /// <summary>
        /// AI —á–∞—Ç - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        /// </summary>
        [HttpPost("chat")]
        public async Task<IActionResult> Chat([FromBody] ChatRequest request)
        {
            try
            {
                _logger.LogInformation("AI Chat request: {Message}", request.Message);

                // Mock AI –æ—Ç–≤–µ—Ç—ã
                var response = GenerateMockAiResponse(request.Message);

                await Task.Delay(500); // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

                return Ok(new
                {
                    message = response,
                    timestamp = DateTime.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –≤ AI —á–∞—Ç–µ");
                return StatusCode(500, new { message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞" });
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é
        /// </summary>
        [HttpPost("upsell")]
        public IActionResult GetUpsellRecommendations([FromBody] UpsellRequest request)
        {
            try
            {
                _logger.LogInformation("AI Upsell request for order items: {Count}", request.OrderItems?.Length ?? 0);

                var recommendations = new[]
                {
                    new
                    {
                        dishId = 15,
                        dishName = "–î–µ—Å–µ—Ä—Ç –¢–∏—Ä–∞–º–∏—Å—É",
                        reason = "–û—Ç–ª–∏—á–Ω–æ —Å–æ—á–µ—Ç–∞–µ—Ç—Å—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–ª—é–¥–æ–º",
                        confidence = 0.92m
                    },
                    new
                    {
                        dishId = 23,
                        dishName = "–í–∏–Ω–æ –ö–∞–±–µ—Ä–Ω–µ",
                        reason = "–ò–¥–µ–∞–ª—å–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç —Å—Ç–µ–π–∫",
                        confidence = 0.88m
                    },
                    new
                    {
                        dishId = 8,
                        dishName = "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å",
                        reason = "–ü–æ–ø—É–ª—è—Ä–Ω–∞—è –∑–∞–∫—É—Å–∫–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–ª—é–¥—É",
                        confidence = 0.75m
                    }
                };

                return Ok(new
                {
                    recommendations = recommendations,
                    totalPotentialRevenue = 2450.0m
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π");
                return StatusCode(500, new { message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π" });
            }
        }

        /// <summary>
        /// AI –ø–æ–∏—Å–∫ –ø–æ –º–µ–Ω—é
        /// </summary>
        [HttpGet("search")]
        public IActionResult SearchMenu([FromQuery] string query)
        {
            try
            {
                _logger.LogInformation("AI Search query: {Query}", query);

                var results = new[]
                {
                    new
                    {
                        dishId = 5,
                        dishName = "–°—Ç–µ–π–∫ –†–∏–±–∞–π",
                        relevanceScore = 0.95m,
                        reason = "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É"
                    },
                    new
                    {
                        dishId = 12,
                        dishName = "–ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞",
                        relevanceScore = 0.82m,
                        reason = "–ü–æ—Ö–æ–∂–µ–µ –±–ª—é–¥–æ"
                    }
                };

                return Ok(new
                {
                    query = query,
                    results = results,
                    suggestions = new[] { "—Å—Ç–µ–π–∫ –º–µ–¥–∏—É–º", "—Å—Ç–µ–π–∫ –≤–µ–ª–ª–¥–∞–Ω", "–≥–æ–≤—è–¥–∏–Ω–∞" }
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ AI –ø–æ–∏—Å–∫–µ");
                return StatusCode(500, new { message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ" });
            }
        }

        private string GenerateMockAiResponse(string message)
        {
            var lowerMessage = message.ToLower();

            if (lowerMessage.Contains("–≤—ã—Ä—É—á–∫–∞") || lowerMessage.Contains("–¥–æ—Ö–æ–¥"))
            {
                return "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –æ –≤—ã—Ä—É—á–∫–µ...\n\n" +
                       "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –≤—ã—Ä—É—á–∫–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ 1,250,000 ‚ÇΩ. –≠—Ç–æ –Ω–∞ 12% –≤—ã—à–µ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏. " +
                       "–°–∞–º—ã–π –ø—Ä–∏–±—ã–ª—å–Ω—ã–π –¥–µ–Ω—å - –ø—è—Ç–Ω–∏—Ü–∞ (255,000 ‚ÇΩ). –†–µ–∫–æ–º–µ–Ω–¥—É—é —É–≤–µ–ª–∏—á–∏—Ç—å –∑–∞–ø–∞—Å—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±–ª—é–¥ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ.";
            }

            if (lowerMessage.Contains("–ø–æ–ø—É–ª—è—Ä–Ω") || lowerMessage.Contains("–±–ª—é–¥"))
            {
                return "üçΩÔ∏è –¢–æ–ø-3 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±–ª—é–¥–∞:\n\n" +
                       "1. –°—Ç–µ–π–∫ –†–∏–±–∞–π - 145 –∑–∞–∫–∞–∑–æ–≤\n" +
                       "2. –ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞ - 138 –∑–∞–∫–∞–∑–æ–≤\n" +
                       "3. –°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å - 132 –∑–∞–∫–∞–∑–∞\n\n" +
                       "–°—Ç–µ–π–∫ –ø—Ä–∏–Ω–æ—Å–∏—Ç –Ω–∞–∏–±–æ–ª—å—à—É—é –ø—Ä–∏–±—ã–ª—å. –°–æ–≤–µ—Ç—É—é –¥–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é –Ω–∞ –∫–æ–º–±–æ —Å–æ —Å—Ç–µ–π–∫–æ–º.";
            }

            if (lowerMessage.Contains("—Å–æ—Ç—Ä—É–¥–Ω–∏–∫") || lowerMessage.Contains("–æ—Ñ–∏—Ü–∏–∞–Ω—Ç"))
            {
                return "üë• –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞:\n\n" +
                       "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ - –ª—É—á—à–∏–π –æ—Ñ–∏—Ü–∏–∞–Ω—Ç –º–µ—Å—è—Ü–∞ (45 –∑–∞–∫–∞–∑–æ–≤, —Ä–µ–π—Ç–∏–Ω–≥ 4.8).\n" +
                       "–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ –∫–æ–º–∞–Ω–¥–µ - 3,654 ‚ÇΩ.\n" +
                       "–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏–Ω–≥ –ø–æ –¥–æ–ø—Ä–æ–¥–∞–∂–∞–º –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞.";
            }

            if (lowerMessage.Contains("—Ä–µ–∫–æ–º–µ–Ω–¥") || lowerMessage.Contains("—Å–æ–≤–µ—Ç"))
            {
                return "üí° AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ –±–∏–∑–Ω–µ—Å–∞:\n\n" +
                       "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Å–µ–∑–æ–Ω–Ω–æ–µ –º–µ–Ω—é (–æ—Å–µ–Ω–Ω–∏–µ –±–ª—é–¥–∞)\n" +
                       "‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏\n" +
                       "‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö\n" +
                       "‚Ä¢ –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –¥–µ–≥—É—Å—Ç–∞—Ü–∏—é –Ω–æ–≤—ã—Ö –±–ª—é–¥";
            }

            if (lowerMessage.Contains("–ø—Ä–∏–≤–µ—Ç") || lowerMessage.Contains("hello"))
            {
                return "üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å:\n\n" +
                       "‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–º –≤—ã—Ä—É—á–∫–∏ –∏ –∑–∞–∫–∞–∑–æ–≤\n" +
                       "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –º–µ–Ω—é\n" +
                       "‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π —Ä–∞–±–æ—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∞\n" +
                       "‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–∞–º–∏ —Å–ø—Ä–æ—Å–∞\n\n" +
                       "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ —Ä–∞–±–æ—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞!";
            }

            return "ü§ñ –ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –º–Ω–µ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. " +
                   "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ –≤—ã—Ä—É—á–∫–µ, –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±–ª—é–¥–∞—Ö, –ø–µ—Ä—Å–æ–Ω–∞–ª–µ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.";
        }
    }

    public class ChatRequest
    {
        public string Message { get; set; } = string.Empty;
    }

    public class UpsellRequest
    {
        public int[]? OrderItems { get; set; }
    }
}
